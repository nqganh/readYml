import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.DumperOptions

pipeline {
    agent {
		label 'skullken_node'
	}
	stages {
		stage('Example Build') {
			options{ 
						timeout(time: 4, unit: 'SECONDS')
					}
			steps {
				script {
				
					def PROVIDER_MANIFEST = "raf_fullgression_F_225.yml"
					echo 'Hello, Skull'
					currentBuild.description = '<a href="https://bitbucket.rbbn.com/projects/ASRV/repos/lab-resources/browse/'+'">'+'SKullken'+'</a>'
                    currentBuild.displayName = "Read Yaml file #${BUILD_NUMBER}"
					def image_name = AS_MANIFEST['spec']['vnfs'][0]['rgs'][0]['image']
					def info_name = (image_name =~ /(\w+)-([0-9]{2}).([0-9]{1}).([0-9]{1}).([0-9]{4}).(\w+))[0][1] 
					//AS-15.0.0.0.1526.vmdk
					println(info_name)
					def AS_MANIFEST = readYaml file: "$WORKSPACE/$PROVIDER_MANIFEST"
					//echo AS_MANIFEST.toString()
					if(AS_MANIFEST['kind'] == 'GenericAsVnf') {
						// Retreive the VNFC list from the manifest
						def vnfcs0 = AS_MANIFEST['spec']['vnfs'][0]['rgs'][0]['vnfcs']
						def vnfcs1 = AS_MANIFEST['spec']['vnfs'][0]['rgs'][1]['vnfcs']
						def vnfcs = (vnfcs0 << vnfcs1).flatten()
						println(vnfcs)
						// Create a Map of VNFC by name
						def vnfcsByName = vnfcs.inject([:]){ result, vnfc ->
							result[vnfc.name] = vnfc
							result
						}
						def serviceAddresses = AS_MANIFEST.spec.vnfs[0].appConfig.serviceAddresses
						//serviceAddresses.each{
						def netDesc = ""
						def networkElements = AS_MANIFEST.spec.vnfs[0].appConfig.networkElements
						networkElements.each{ ne, info ->
							info.managers.eachWithIndex{ manager, mgrIdx ->
								def mgrIdxStr = ""
								if(info.managers.size() > 1) {
									mgrIdxStr = "${mgrIdx+1}"
									println(mgrIdxStr)
								}
								if(manager.containsKey("internalOamAddress")){
									netDesc +="RAF_${ne.toUpperCase()}${mgrIdxStr}_IP: $manager.internalOamAddress ($ne internalOamAddress)\n"
								}
								if(manager.containsKey("serviceAddressName")){
									def serviceAddress = serviceAddresses.find{ it.name == manager.serviceAddressName }
									netDesc +="RAF_${ne.toUpperCase()}${mgrIdxStr}_IP: $serviceAddress.ip ($ne ${mgrIdxStr} serviceAddressName, $serviceAddress.name)\n"
								}
								manager.instances.eachWithIndex{ instance, istIdx ->
									vnfcsByName[instance.server].networkInfo.networkInterfaces.each{ nic ->
										def istIdxStr = ""
										if(info.managers.any{ it.instances.size() > 1 }) {
											istIdxStr = "${istIdx}_"
										}
										netDesc +="RAF_${ne.toUpperCase()}${mgrIdxStr}_${istIdxStr}IP: $nic.ipv4Address ($nic.subnetName on $instance.server)\n"
									}
								}
							}
						}
						println(netDesc)
					}
				}
			}
		}
		stage('Example Test') {
			steps {
				echo 'Hello, JDK'
			}
		}
	}   
}
