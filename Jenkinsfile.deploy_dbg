import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.DumperOptions
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
def mcp

Map manifestData = null
Map pipelineManifestData = null

Map[] preDeployManifestUpdates = null
Map[] postDeployOperations = null
String[] deployTestPipelines = null

pipeline {
    agent {
		label 'yml_node'
	}
	parameters {
        string(
            defaultValue: 'raf_fullgression_F_225.yml',
            description: "Manifest file name",
            name: 'MANIFEST_NAME')
    }
	stages {
		stage('Example Build') {
			options{ 
						timeout(time: 4, unit: 'SECONDS')
					}
			steps {
				script {
				
					def PROVIDER_MANIFEST = params.MANIFEST_NAME
					echo 'Hello, Skull'
					currentBuild.description = "<a href=https://bitbucket.rbbn.com/>"+'SKullken'+'</a>'
                    currentBuild.displayName = "Read Yaml file #${BUILD_NUMBER}"

					def AS_MANIFEST = readYaml file: "$WORKSPACE/$PROVIDER_MANIFEST"
					
					def image_name = '21.02-development-b240'
					def info_name = (image_name =~ /[0-9]{2}\.[0-9]{2}-(.+)-b[0-9]+/)[0][1] 

					println(info_name)
					
					def image_name1 = 'AS-15.0.0.0.1616.vmdk'
					def info_name1 = (image_name1 =~ /AS-15\.[0-9]{1}\.[0-9]{1}\.[0-9]{1}\.[0-9]{1}\.([0-9]{4})\.(.+)/) 

					println(info_name1)
					//echo AS_MANIFEST.toString()
					if(AS_MANIFEST['kind'] == 'GenericAsVnf') {
						// Retreive the VNFC list from the manifest
						def vnfcs0 = AS_MANIFEST['spec']['vnfs'][0]['rgs'][0]['vnfcs']
						def vnfcs1 = AS_MANIFEST['spec']['vnfs'][0]['rgs'][1]['vnfcs']
						def vnfcs = (vnfcs0 << vnfcs1).flatten()
						//println(vnfcs)
						// Create a Map of VNFC by name
						def vnfcsByName = vnfcs.inject([:]){ result, vnfc ->
							result[vnfc.name] = vnfc
							result
						}
						def serviceAddresses = AS_MANIFEST.spec.vnfs[0].appConfig.serviceAddresses
						//serviceAddresses.each{
						def netDesc = ""
						def ipParam =  [:]
						def paramName = ""
						def networkElements = AS_MANIFEST.spec.vnfs[0].appConfig.networkElements
						networkElements.each{ ne, info ->
							info.managers.eachWithIndex{ manager, mgrIdx ->
								def mgrIdxStr = ""
								if(info.managers.size() > 1) {
									mgrIdxStr = "${mgrIdx+1}"
									println(mgrIdxStr)
								}
								if(manager.containsKey("internalOamAddress")){
									paramName = "RAF_${ne.toUpperCase()}${mgrIdxStr}_IP"
									ipParam[paramName] = "$manager.internalOamAddress"
									netDesc +="RAF_${ne.toUpperCase()}${mgrIdxStr}_IP: $manager.internalOamAddress ($ne internalOamAddress)\n"
								}
								if(manager.containsKey("serviceAddressName")){
									def serviceAddress = serviceAddresses.find{ it.name == manager.serviceAddressName }
									netDesc +="RAF_${ne.toUpperCase()}${mgrIdxStr}_IP: $serviceAddress.ipv4 ($ne ${mgrIdxStr} serviceAddressName, $serviceAddress.name)\n"
									paramName = "RAF_${ne.toUpperCase()}${mgrIdxStr}_IP"
									ipParam[paramName] = "$serviceAddress.ipv4"								
								}
								manager.instances.eachWithIndex{ instance, istIdx ->
									vnfcsByName[instance.server].networkInfo.networkInterfaces.each{ nic ->
										def istIdxStr = ""
										if(info.managers.any{ it.instances.size() > 1 }) {
											istIdxStr = "${istIdx}_"
										}
										netDesc +="RAF_${ne.toUpperCase()}${mgrIdxStr}_${istIdxStr}IP: $nic.ipv4Address ($nic.subnetName on $instance.server)\n"
										paramName = "RAF_${ne.toUpperCase()}${mgrIdxStr}_${istIdxStr}IP"
										ipParam[paramName] = "$nic.ipv4Address"
									}
								}
							}
						}
						//println(netDesc)
						//println(ipParam)
						//for (entry in ipParam) {
						//	echo entry.key
						//	echo entry.value
                        //}
					}
				}
			}
		}
		stage('Example Test') {
			steps {
				script {
					Map pipelineManifestMap = readYaml(file: "$WORKSPACE/${params.PIPELINE_MANIFEST}")
                    pipelineManifestMap.spec.minitafBranchName = "12343"
                    pipelineManifestMap.spec.vnfrTarball = "12343"
                    pipelineManifestMap.spec.deploy.image = "12343"
                    pipelineManifestMap.spec.deploy.pipelineNames = "abc"

                    for (postDeployOperation in pipelineManifestMap.spec.postDeployOperations) {
                        if (postDeployOperation.type == 'upgradePrimary') {
                            postDeployOperation.image = "12343"
                            break
                        }
                    }
					// Serialize modified pipeline manifest map into YAML string
                    String TMP_PIPELINE_MANIFEST_FILE = "tmp/pipeline_manifest.yml"
                    writeYaml(file: TMP_PIPELINE_MANIFEST_FILE, data: pipelineManifestMap)
                    String pipelineManifest = readFile(file: TMP_PIPELINE_MANIFEST_FILE)
                    echo(pipelineManifest)
					
					pipelineManifestData = readYaml(text: params.PIPELINE_MANIFEST.stripIndent())
					
					def spec = rafPipelineManifest.get('spec')
					echo(spec)
                    if (spec == null) {
                        error("Manifest does not contain required 'spec' property")
                    }

                    def metadata = rafPipelineManifest.get('metadata')
					
					echo(metadata)
                    if (metadata == null) {
                        error("Manifest does not contain required 'metadata' property")
                    }
                    
                   

                    //preDeployManifestUpdates = spec.get("preDeployManifestUpdates", [])
                    //postDeployOperations = spec.get("postDeployOperations", [])
                    //
                    //vnfrTarball = spec.get('vnfrTarball', "")
                    //minitafBranchName = spec.get('minitafBranchName', 'MINI_SANITY_NO_MAS_GMS_Kubernetes')
                    //
                    //def deploy = spec.get('deploy')
                    //if (deploy == null) {
                    //    error("Manifest does not contain required 'spec.deploy' property")
                    //}
                    //
                    //deployImage = deploy.get('image')
                    //deployTestPipelines = deploy.get('testPipelines')
					
					//echo preDeployManifestUpdates postDeployOperations vnfrTarball minitafBranchName deployImage deployTestPipelines
				}
			}
		}
	}   
}
