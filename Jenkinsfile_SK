pipeline { 
    agent none 
    stages {
        stage('Run MiniTAF'){
            agent {
                kubernetes {
                    cloud "rco-ocp1"
                    label "as-pre-raf-n-${BUILD_NUMBER}"
                    defaultContainer 'jnlp'
                    yaml """
                      apiVersion: v1
                      kind: Pod
                      spec:
                        imagePullSecrets:
                        - name: artifactory-plano
                        initContainers:
                        - name: net-admin
                          image: artifactory-tx.rbbn.com/dockerhub-docker-remote/alpine:latest
                          resources:
                            requests:
                              memory: "1Gi"
                              cpu:  1
                            limits:
                              memory: "1Gi"
                              cpu:  1
                          securityContext:
                            allowPrivilegeEscalation: false
                            runAsUser: 0
                            capabilities:
                              add:
                              - NET_ADMIN
                          command: [ "/bin/sh", "-c", "|" ]
                          args: ["set -ex && ip route add default via 172.29.212.1 dev net2 metric 20 && echo 2 >/proc/sys/net/ipv4/conf/all/rp_filter"]    
                        containers:
                        - name: minitaf
                          image: image-registry.openshift-image-registry.svc:5000/dev-ops/minitaf-runtime:latest
                          command: ['cat']
                          tty: true
                          securityContext:
                            privileged: true
                          resources:
                            requests:
                              memory: "2"
                              cpu: 1
                            limits:
                              memory: "4Gi"
                              cpu: 4
                        - name: jnlp
                          image: artifactory-tx.rbbn.com/dockerhub-docker-remote/jenkins/jnlp-slave:3.35-5-alpine
                          resources:
                            requests:
                              memory: "2Gi"
                              cpu:  2
                            limits:
                              memory: "2Gi"
                              cpu:  2
                      restartPolicy: Always
                    """.stripIndent()
                }
            }
            steps {
                container('minitaf') {
                    withCredentials([usernamePassword(credentialsId: '8ce4adf7-500d-4f6d-a064-43c96f6cf318', usernameVariable: 'ART_USERNAME', passwordVariable: 'ART_PASS')]) {
                        script{
                            try {
                                sh '''
                                apt-get update
                                apt-get install -y iproute2 iputils-ping
                                NET1=$(ip -4 addr show dev net1 | grep inet | sed -re 's/.*inet (.*)\\/.*brd.*/\\1/g')
                                NET2=$(ip -4 addr show dev net2 | grep inet | sed -re 's/.*inet (.*)\\/.*brd.*/\\1/g')
                                HN=$(hostname)
                                ls -l /etc
                                cat /etc/hosts
                                cat /etc/hosts | sed -e "s/.*${HN}/${NET1} ${HN}/" >/tmp/myhosts ; cp /tmp/myhosts /etc/hosts
                                cat /etc/hosts
                                ip route
                                ip addr
                                hostname -I
                                ping -I net1 ${RAF_SM_IP} -c 4
                                ping -I net2 ${RAF_SM_IP} -c 4
                                location=$(pwd)/a2-test/
                                sed -i "s/RAF_SM_IP/${RAF_SM_IP}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_PROV1_IP/${RAF_PROV1_IP}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM1_IP/${RAF_SESM1_IP}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM2_IP/${RAF_SESM2_IP}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_PA_IP/${RAF_PA_IP}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM1_0_IP/${RAF_SESM1_0_IP}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM1_1_IP/${RAF_SESM1_1_IP}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM2_0_IP/${RAF_SESM2_0_IP}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SM_LONG_NAME/${RAF_SM_LONG_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SM_SHORT_NAME/${RAF_SM_SHORT_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM1_LONG_NAME/${RAF_SESM1_LONG_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM1_SHORT_NAME/${RAF_SESM1_SHORT_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM2_LONG_NAME/${RAF_SESM2_LONG_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM2_SHORT_NAME/${RAF_SESM2_SHORT_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_PROV1_LONG_NAME/${RAF_PROV1_LONG_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_PROV1_SHORT_NAME/${RAF_PROV1_SHORT_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_PROV2_LONG_NAME/${RAF_PROV2_LONG_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_PROV2_SHORT_NAME/${RAF_PROV2_SHORT_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_PA1_LONG_NAME/${RAF_PA1_LONG_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_PA1_SHORT_NAME/${RAF_PA1_SHORT_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_AM1_LONG_NAME/${RAF_AM1_LONG_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_AM1_SHORT_NAME/${RAF_AM1_SHORT_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM1_BASE_PORT/${RAF_SESM1_BASE_PORT}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SESM2_BASE_PORT/${RAF_SESM2_BASE_PORT}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_SM_SERVICE_NODE_NAME/${RAF_SM_SERVICE_NODE_NAME}/" "$location/lab-config.groovy"
                                sed -i "s/RAF_KUBERNETES_IP1/$NET1/" "$location/lab-config.groovy"
                                sed -i "s/RAF_KUBERNETES_IP2/$NET2/" "$location/lab-config.groovy"
                                cd a2-test
                                /usr/bin/gradle -DRAF_SESM2_LONG_NAME=$RAF_SESM2_LONG_NAME -DRAF_PROV2_LONG_NAME=$RAF_PROV2_LONG_NAME \
                                -DRAF_PA_IP=$RAF_PA_IP -DRAF_SM_LONG_NAME=$RAF_SM_LONG_NAME -DRAF_SM_SHORT_NAME=$RAF_SM_SHORT_NAME \
                                -DRAF_SESM1_1_IP=$RAF_SESM1_1_IP -DRAF_PROV2_SHORT_NAME=$RAF_PROV2_SHORT_NAME -DRAF_PA1_LONG_NAME=$RAF_PA1_LONG_NAME \
                                -DRAF_PA1_SHORT_NAME=$RAF_PA1_SHORT_NAME -DRAF_SESM2_SHORT_NAME=$RAF_SESM2_SHORT_NAME -DRAF_SM_IP=$RAF_SM_IP \
                                -DRAF_SESM1_BASE_PORT=$RAF_SESM1_BASE_PORT -DRAF_SESM1_IP=$RAF_SESM1_IP -DRAF_AM1_SHORT_NAME=$RAF_AM1_SHORT_NAME \
                                -DRAF_PROV1_IP=$RAF_PROV1_IP -DUPSTREAM_BUILD_NUMBER=$UPSTREAM_BUILD_NUMBER -DRAF_AM1_LONG_NAME=$RAF_AM1_LONG_NAME \
                                -DRAF_SESM2_0_IP=$RAF_SESM2_0_IP -DRAF_PROV1_LONG_NAME=$RAF_PROV1_LONG_NAME -DRAF_SESM1_LONG_NAME=$RAF_SESM1_LONG_NAME \
                                -DRAF_SESM2_BASE_PORT=$RAF_SESM2_BASE_PORT -DRAF_SESM1_0_IP=$RAF_SESM1_0_IP -DLOAD_VERSION=$LOAD_VERSION \
                                -DLOAD_RELEASE=$LOAD_RELEASE -DRAF_SESM2_IP=$RAF_SESM2_IP -DRAF_SM_SERVICE_NODE_NAME=$RAF_SM_SERVICE_NODE_NAME \
                                -DAPI_Specs=true -DRAF_PROV1_SHORT_NAME=$RAF_PROV1_SHORT_NAME -DRAF_SESM1_SHORT_NAME=$RAF_SESM1_SHORT_NAME \
                                -Dminitaf.version=latest -Dminitaf.config.traceLevel=1 -Plab=RAF -Pminitaf.version=latest cleanLogs run_15.0mini
                                '''
                            }
                            catch (Exception ex) {
                                println "Exception occurred in setupWorkerNode $ex"
                                stgResult = "FAIL"
                            }
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        container ('minitaf') {
                          archiveArtifacts artifacts: 'a2-test/test/*/log/**/*.txt', fingerprint: true
                          archiveArtifacts artifacts: 'a2-test/build/ServiceTraces/**/*.log', fingerprint: true, allowEmptyArchive: true
                          junit allowEmptyResults: false, testResults:'a2-test/build/test-results/*.xml'
                        }
                    }
                }
            }
        }
        stage('Execute downstream job') {
            steps {
                script {                    
                    try {
                        build job: 'SOAPUI_Kubernetes', wait: true, parameters: [
                            string(name: 'LOAD_RELEASE', value: "${LOAD_RELEASE}"),                        						
                            string(name: 'RAF_SM_IP', value: "${RAF_SM_IP}"),
                            string(name: 'RAF_PROV1_IP', value: "${RAF_PROV1_IP}"),
                            string(name: 'RAF_PROV2_IP', value: "${RAF_PROV2_IP}"),
                            string(name: 'RAF_PHYSICAL_SITE', value: "${RAF_PHYSICAL_SITE}")]                        
                        }
                    catch (err) {
                            echo "Failed to call SOAPUI_Kubernetes downstream job (job may be disabled): " + err.toString()
                    }
                }
			}
        }
    }
}